diff --git a/src/Controller/AjaxController.php b/src/Controller/AjaxController.php
index a4f41da83784ed28e31595edffc341793a935c78..22eb6963b37715662b7a230aea49b01c2e53dada 100644
--- a/src/Controller/AjaxController.php
+++ b/src/Controller/AjaxController.php
@@ -4,17 +4,43 @@ namespace Drupal\s3fs_cors\Controller;
 
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Controller\ControllerBase;
-use Drupal\Core\Site\Settings;
+use Drupal\s3fs\S3fsServiceInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\file\Entity\File;
 use Drupal\s3fs\StreamWrapper\S3fsStream;
-use Aws\S3\S3Client;
 
 /**
  * Default controller for the s3fs_cors module.
  */
 class AjaxController extends ControllerBase {
 
+  /**
+   * @var \Aws\S3\S3ClientInterface
+   */
+  private $s3Client;
+
+  /**
+   * AjaxController constructor.
+   *
+   * @param \Drupal\s3fs\S3fsServiceInterface $s3fs
+   *
+   * @throws \Drupal\s3fs\S3fsException
+   */
+  public function __construct(S3fsServiceInterface $s3fs) {
+    $s3_config = $this->config('s3fs.settings')->get();
+    $this->s3Client = $s3fs->getAmazonS3Client($s3_config);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('s3fs')
+    );
+  }
+
   /**
    * Return the file key (i.e. the path and name).
    *
@@ -137,17 +163,9 @@ class AjaxController extends ControllerBase {
    * Check whehter a passed file name exists (using the file key).
    */
   private function s3FileExists($key) {
-    $config = \Drupal::config('s3fs.settings');
-    $client = new S3Client([
-      'credentials' => [
-        'key'    => $config->get('access_key') ?: Settings::get('s3fs.access_key', ''),
-        'secret' => $config->get('secret_key') ?: Settings::get('s3fs.secret_key', ''),
-      ],
-      'region'  => $config->get('region'),
-      'version' => '2006-03-01',
-    ]);
+    $config = $this->config('s3fs.settings');
     $bucket = $config->get('bucket');
-    return $client->doesObjectExist($bucket, $key);
+    return $this->s3Client->doesObjectExist($bucket, $key);
   }
 
   /**
diff --git a/src/Element/S3fsCorsFile.php b/src/Element/S3fsCorsFile.php
index 78386b67441f9609cb51be8ed16284266f269523..7d496c9313c7171c3cca879e6ad9b254978202ff 100644
--- a/src/Element/S3fsCorsFile.php
+++ b/src/Element/S3fsCorsFile.php
@@ -5,13 +5,13 @@ namespace Drupal\s3fs_cors\Element;
 use Aws\Credentials\CredentialProvider;
 use Aws\Credentials\Credentials;
 use Aws\Sts\StsClient;
-use Aws\S3\S3Client;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\Environment;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperManager;
 use Drupal\file\Element\ManagedFile;
 use Drupal\Core\Site\Settings;
 use Drupal\file\Entity\File;
@@ -164,7 +164,14 @@ class S3fsCorsFile extends ManagedFile {
     $s3_key = $upload_parts[1];
     // If a base folder for public or private uri schemes has been defined, prepend it to the $s3 key,
     // else use the same defaults as the s3fs module.
-    $uri_scheme = \Drupal::service('file_system')->uriScheme($element['#upload_location']);
+    if (method_exists('\Drupal\Core\StreamWrapper\StreamWrapperManager', 'getScheme')) {
+      // Drupal 8.8+, inc. Drupal 9
+      $uri_scheme = StreamWrapperManager::getScheme($element['#upload_location']);
+    }
+    else {
+      // Drupal < 8.8
+      $uri_scheme = \Drupal::service('file_system')->uriScheme($element['#upload_location']);
+    }
     if ($uri_scheme == 'public' || $uri_scheme == 'private') {
       $config_key = $uri_scheme . '_folder';
       $folder_key = empty($config->get($config_key)) ? 's3fs-' . $uri_scheme : $config->get($config_key);
@@ -197,12 +204,9 @@ class S3fsCorsFile extends ManagedFile {
 
     // Create an S3 client using the provider. This should use the Instance
     //Profile provider if this code is running in an AWS instance
-    $client = new S3Client([
-      'region' => $region,
-      'version' => 'latest',
-      //'credentials' => $memoizedProvider,
-      'credentials' => $provider
-    ]);
+    /** @var \Drupal\s3fs\S3fsServiceInterface $s3fs */
+    $s3fs = \Drupal::service('s3fs');
+    $client = $s3fs->getAmazonS3Client($config->get());
     $creds = $client->getCredentials()->wait();
     $access_key = $creds->getAccessKeyId();
     $secret_key = $creds->getSecretKey();
diff --git a/src/Form/S3fsCorsAdminForm.php b/src/Form/S3fsCorsAdminForm.php
index 61762a1c033fa75563739a1de4fae498b70303d3..7369ac749a08e8ae5d649f1b78108249d156f88e 100644
--- a/src/Form/S3fsCorsAdminForm.php
+++ b/src/Form/S3fsCorsAdminForm.php
@@ -2,16 +2,46 @@
 
 namespace Drupal\s3fs_cors\Form;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
-use Drupal\Core\Site\Settings;
-use Aws\S3\S3Client;
+use Drupal\s3fs\S3fsServiceInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Config settings for S3FS Cors.
  */
 class S3fsCorsAdminForm extends ConfigFormBase {
 
+  /**
+   * @var \Aws\S3\S3ClientInterface
+   */
+  private $s3Client;
+
+  /**
+   * S3fsCorsAdminForm constructor.
+   *
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param \Drupal\s3fs\S3fsServiceInterface $s3fs
+   *
+   * @throws \Drupal\s3fs\S3fsException
+   */
+  public function __construct(ConfigFactoryInterface $config_factory, S3fsServiceInterface $s3fs) {
+    parent::__construct($config_factory);
+    $s3_config = $this->config('s3fs.settings')->get();
+    $this->s3Client = $s3fs->getAmazonS3Client($s3_config);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('config.factory'),
+      $container->get('s3fs')
+    );
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -75,18 +105,10 @@ class S3fsCorsAdminForm extends ConfigFormBase {
 
     // parent::submitForm($form, $form_state);
     // Get S3FS Settings.
-    $s3_config = \Drupal::config('s3fs.settings');
+    $s3_config = $this->config('s3fs.settings');
     if (!empty($s3_config)) {
-      $client = new S3Client([
-        'credentials' => [
-          'key'    => $s3_config->get('access_key') ?: Settings::get('s3fs.access_key', ''),
-          'secret' => $s3_config->get('secret_key') ?: Settings::get('s3fs.secret_key', ''),
-        ],
-        'region'  => $s3_config->get('region'),
-        'version' => '2006-03-01',
-      ]);
       if (!empty($cors_origin)) {
-        $client->putBucketCors([
+        $this->s3Client->putBucketCors([
           // REQUIRED.
           'Bucket' => $s3_config->get('bucket'),
           // REQUIRED.
@@ -113,7 +135,7 @@ class S3fsCorsAdminForm extends ConfigFormBase {
       else {
         // If $form_state['values']['s3fs_cors_origin'] is empty, that means we
         // need to delete their bucket's CORS config.
-        $client->deleteBucketCors([
+        $this->s3Client->deleteBucketCors([
           'Bucket' => $s3_config->get('bucket'),
         ]);
         $this->messenger()->addMessage(t("CORS settings have been deleted succesfully"));
